datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id  Int @id @default(autoincrement())
  createdAt DateTime  @default(now())

  name  String  @unique
  mcID  String  @unique

  builds  Build[]
  favorites Build[] @relation("favorite")
  categorys Category[]
  interactions Interaction[]

  reports Report[]  @relation("reportCreator")
  createdReports  Report[]
}


model Interaction {
  id  Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  userId  Int
  user  User  @relation(fields: [userId], references: [id])

  type  InteractionType

  buildId Int
  build Build @relation(fields: [buildId], references: [id])
}


model Build {
  id  Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  username String
  user  User  @relation(fields: [username], references: [name])

  title String
  description String
  difficulty BuildDifficulty
  size BuildSize

  images  String[]
  files   BuildFiles[]
  inventory BuildInventory[]
  categorys Category[]
  favorites User[] @relation("favorite")
  interactions Interaction[]

  reports Report[]
}

model BuildFiles {
  id  Int @id @default(autoincrement())

  buildId Int
  build Build @relation(fields: [buildId], references: [id])

  format  BuildFileFormat
  file  String
}


model BuildInventory {
  id  Int @id @default(autoincrement())

  buildId Int
  build Build @relation(fields: [buildId], references: [id])

  block String
  count Int
}

model Category {
  id  Int @id @default(autoincrement())
  createdAt DateTime  @default(now())
  active  Boolean   @default(false)

  title String  @unique
  description String  

  createdBy String
  user  User  @relation(fields: [createdBy], references: [name])

  builds Build[]
}

model Report {
  id  Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt  DateTime  @updatedAt

  reportedBy String
  user  User  @relation("reportCreator", fields: [reportedBy], references: [name])

  reported  String
  user User   @relation(fields: [reported], references: [name])

  buildId Int
  build Build @relation(fields: [buildId], references: [id])
}


// Enums
enum InteractionType {
  Like
  DisLike
  Download
  View
}

enum BuildDifficulty {
  Easy
  Normal
  Hard
  Advanced
  Pro
}

enum BuildSize {
  Small
  Medium
  Large
  Huge
}

enum BuildFileFormat {
  NBT
  Litematic
  Schematic
  MCSctructure
}

enum ReportReason {
  INAPPROPRIATE
  STOLEN
  OTHER
}

enum ReportAction {
  DELETE
  KEEP
}