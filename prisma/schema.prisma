// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Report {
  id        Int      @id @default(autoincrement())
  buildId   Int
  build     Build    @relation(fields: [buildId], references: [id])
  userId    Int
  user      User     @relation("ReportCreator", fields: [userId], references: [id])
  reportedBy Int
  reported  User     @relation(fields: [reportedBy], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  reason    ReportReason
  otherDescription String?

  description String
  
  handled   Boolean  @default(false)
  action    ReportAction?
  handledBy Int?
}

enum ReportReason {
  INAPPROPRIATE
  STOLEN
  OTHER
}

enum ReportAction {
  DELETE
  KEEP
}

model User {
  id          Int      @id @default(autoincrement())
  minecraftId String   @unique
  minecraftName String @unique
  createdAt   DateTime @default(now())

  role        Role     @default(USER)

  builds      Build[]
  favorites   Favorite[]
  createdCategories Category[]

  reports     Report[]
  createdReports Report[] @relation("ReportCreator")

  likes       Like[]
  dislikes    Dislike[]
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model Build {
  username  String
  user      User     @relation(fields: [username], references: [minecraftName])

  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  description String
  
  difficulty Difficulty
  size Size
  
  files File[]

  images    Image[]
  views     Int      @default(0)
  downloads Int      @default(0)
  imageCount Int
  blockCount Int
  inventory Item[]
  category  Category[]

  likeCount likeCounter?

  favorites Favorite[]
  reports   Report[]
}

model File {
  id        Int      @id @default(autoincrement())
  build     Build    @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId   Int
  file      Bytes
  extension FileExtension
}

enum FileExtension {
  Litematic
  Schematic
  NBT
  MCSctructure
}

model Image{
  id        Int      @id @default(autoincrement())
  build     Build    @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId   Int
  image     Bytes
}

model likeCounter {
  id        Int      @id @default(autoincrement())
  build     Build    @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId   Int      @unique
  
  likeCount Int      @default(0)
  dislikeCount Int   @default(0)

  likes     Like[]
  dislikes  Dislike[]
}

enum Difficulty {
  Easy
  Normal
  Hard
}

enum Size {
  Small
  Medium
  Large
  Huge
}

model Item {
  id        Int      @id @default(autoincrement())
  build     Build    @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId   Int
  name      String
  count     Int
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  build     likeCounter    @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId   Int
}

model Dislike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  build     likeCounter    @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId   Int
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  build     Build    @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId   Int
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  description String
  createdAt DateTime @default(now())
  createdBy Int
  user      User     @relation(fields: [createdBy], references: [id])

  builds    Build[]
}